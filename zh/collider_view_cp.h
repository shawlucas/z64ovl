#ifndef ZH_COLLIDER_VIEW
#define ZH_COLLIDER_VIEW

#include "matrix.h"
#define sin z_sins
#define cos z_coss
#define sinf z_sinf
#define cosf z_cosf
#define sqrtf z_sqrt
#define floorf z_floorf
#define memcpy(A,B,C) z_bcopy(B,A,C)
#define guTranslateF libultra_guTranslateF
#define guScaleF libultra_guScaleF
#define guMtxCatF libulutra_guMtxCatF
#define guRotateRPYF libultra_guRotateRPYF

/* translucent material */
Gfx xlu_material[] = {
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_OFF),
	gsDPPipeSync(),
	gsDPSetRenderMode(AA_EN | Z_CMP | Z_UPD | IM_RD | FORCE_BL | CVG_DST_CLAMP | ZMODE_XLU | CVG_X_ALPHA | ALPHA_CVG_SEL | GBL_c1(G_BL_CLR_FOG, G_BL_A_SHADE, G_BL_CLR_IN, G_BL_1MA), G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(
		0, 0, 0, ENVIRONMENT
		, 0, 0, 0, ENVIRONMENT
		, 0, 0, 0, COMBINED
		, 0, 0, 0, COMBINED
	),
	gsDPSetEnvColor(0xFF, 0xFF, 0xFF, 0x80),
	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
	gsSPClearGeometryMode(G_CULL_BACK),
	gsSPClearGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPEndDisplayList()
};

unsigned char cylinder_vbuf[512] = {
0x00, 0x00, 0x00, 0xC8, 0xFF, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
0x00, 0x00, 0x00, 0xFF, 0x00, 0x26, 0x00, 0x00, 0xFF, 0xA4, 0x00, 0x00,
0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00,
0xFF, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF,
0x00, 0x26, 0x00, 0xC8, 0xFF, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
0x00, 0x00, 0x00, 0xFF, 0x00, 0x47, 0x00, 0x00, 0xFF, 0xB9, 0x00, 0x00,
0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x47, 0x00, 0xC8,
0xFF, 0xB9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF,
0x00, 0x5C, 0x00, 0x00, 0xFF, 0xDA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
0x00, 0x00, 0x00, 0xFF, 0x00, 0x5C, 0x00, 0xC8, 0xFF, 0xDA, 0x00, 0x00,
0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x64, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF,
0x00, 0x64, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
0x00, 0x00, 0x00, 0xFF, 0x00, 0x5C, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00,
0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x5C, 0x00, 0xC8,
0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF,
0x00, 0x47, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
0x00, 0x00, 0x00, 0xFF, 0x00, 0x47, 0x00, 0xC8, 0x00, 0x47, 0x00, 0x00,
0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x26, 0x00, 0x00,
0x00, 0x5C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF,
0x00, 0x26, 0x00, 0xC8, 0x00, 0x5C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xC8,
0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF,
0xFF, 0xDA, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
0x00, 0x00, 0x00, 0xFF, 0xFF, 0xDA, 0x00, 0xC8, 0x00, 0x5C, 0x00, 0x00,
0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xB9, 0x00, 0x00,
0x00, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF,
0xFF, 0xB9, 0x00, 0xC8, 0x00, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
0x00, 0x00, 0x00, 0xFF, 0xFF, 0xA4, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00,
0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xA4, 0x00, 0xC8,
0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF,
0xFF, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
0x00, 0x00, 0x00, 0xFF, 0xFF, 0x9C, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xA4, 0x00, 0x00,
0xFF, 0xDA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF,
0xFF, 0xA4, 0x00, 0xC8, 0xFF, 0xDA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
0x00, 0x00, 0x00, 0xFF, 0xFF, 0xB9, 0x00, 0x00, 0xFF, 0xB9, 0x00, 0x00,
0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xB9, 0x00, 0xC8,
0xFF, 0xB9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF,
0xFF, 0xDA, 0x00, 0x00, 0xFF, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
0x00, 0x00, 0x00, 0xFF, 0xFF, 0xDA, 0x00, 0xC8, 0xFF, 0xA4, 0x00, 0x00,
0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF
};

Gfx cylinder_dlist[] = {
{ 0x01020040, (uint32_t)cylinder_vbuf },
{ 0x06000204, 0x00060802 },
{ 0x060A0C08, 0x000E100C },
{ 0x06121410, 0x00161814 },
{ 0x061A1C18, 0x001E201C },
{ 0x06222420, 0x00262824 },
{ 0x062A2C28, 0x002E302C },
{ 0x06323430, 0x00363834 },
{ 0x060A3A2A, 0x003A3C38 },
{ 0x063E043C, 0x000C1C2C },
{ 0x06000602, 0x00060A08 },
{ 0x060A0E0C, 0x000E1210 },
{ 0x06121614, 0x00161A18 },
{ 0x061A1E1C, 0x001E2220 },
{ 0x06222624, 0x00262A28 },
{ 0x062A2E2C, 0x002E3230 },
{ 0x06323634, 0x00363A38 },
{ 0x060A0600, 0x00003E3A },
{ 0x063A3632, 0x00322E2A },
{ 0x062A2622, 0x00221E1A },
{ 0x061A1612, 0x00120E1A },
{ 0x060E0A1A, 0x000A003A },
{ 0x063A322A, 0x002A220A },
{ 0x06221A0A, 0x003A3E3C },
{ 0x063E0004, 0x003C0402 },
{ 0x0602083C, 0x00080C3C },
{ 0x060C1014, 0x0014180C },
{ 0x06181C0C, 0x001C202C },
{ 0x0620242C, 0x0024282C },
{ 0x062C3034, 0x0034383C },
{ 0x062C343C, 0x003C0C2C },
{ 0xDF000000, 0x00000000 }
};

static void zh_collider_draw_cylinder(z64_global_t* gl, Gfx** p_gfx_p, Gfx** p_gfx_d, float x, float y, float z, int radius, int height)
{
    Mtx m;
    {
        float mf[4][4];
        float ms[4][4];
        guTranslateF(mf, x, y, z);
        guScaleF(ms, radius / 128.0f, height / 204.0f, radius / 128.0f);
        guMtxCatF(ms, mf, mf);
        guMtxF2L(mf, &m);
    }
    Mtx* mtx = z_matrix_alloc((gl->common).gfx_ctxt, "");
    z_bcopy(&m, (void*)mtx, 0x40);
    gSPMatrix((*p_gfx_p)++, mtx, G_MTX_MODELVIEW | G_MTX_LOAD | G_MTX_PUSH);
    gSPDisplayList((*p_gfx_p)++, xlu_material);
    gSPDisplayList((*p_gfx_p)++, cylinder_dlist);
    gSPPopMatrix((*p_gfx_p)++, G_MTX_MODELVIEW);
}


static void zh_collider_draw(z64_global_t* gl, z64_collider_t* col)
{
    z64_disp_buf_t* xlu = &ZQDL(gl, poly_xlu);
    Gfx** p_gfx_p = &xlu->p;
    Gfx** p_gfx_d = &xlu->d;

    switch(col->shape)
    {
        case COL_SHAPE_JNTSPH: // Spheres
            break;
        case COL_SHAPE_CYLINDER: {
            z64_collider_cylinder_t* cyl = (z64_collider_cylinder_t*)col;
            // Make cylinders with 0 radius appear very small.
            int radius = cyl->dim.radius;
            if (radius == 0) radius = 1;

            zh_collider_draw_cylinder(
                gl, p_gfx_p, p_gfx_d
                , cyl->dim.pos.x, cyl->dim.pos.y + cyl->dim.y_shift, cyl->dim.pos.z
                , radius, cyl->dim.height
            );
            break;
        }
        case COL_SHAPE_TRIS:
            break;
        case COL_SHAPE_QUAD:
            break;
    }
}
#endif /* !ZH_COLLIDER_VIEW */
